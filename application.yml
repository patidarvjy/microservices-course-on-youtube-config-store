
# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://localhost:5432/colo_role
  
spring.datasource.username=postgres
spring.datasource.password=hrhk
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# server.port = 8081

spring.application.name=colo-user-server

#api.key=api-key-here

# ===============================
# = JPA / HIBERNATE
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update

#colo_user_db
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
colouser.security.passwords.pbkdf2.secret = yXD6Z9sV

# Password Policies Config
colouser.security.passwords.strength.size = 8
colouser.security.passwords.strength.upperCase = 0
colouser.security.passwords.strength.lowerCase = 0
colouser.security.passwords.strength.symbols = 0
colouser.security.passwords.strength.numbers = 0

colouser.security.jwt.keystore.resource = "devjwt1.jks"
colouser.security.jwt.keystore.path = /devjwt.jks
colouser.security.jwt.keystore.storepass = mySecretKey
colouser.security.jwt.keystore.keypass = mySecretKey
colouser.security.jwt.keystore.keyname = jwt


# To avoid java.lang.reflect.InvocationTargetException: null


spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres



amazonProperties.endpointUrl = https://s3.us-east-2.amazonaws.com
amazonProperties.accessKey = AKIAXJPO2SPP3G5KZOST
amazonProperties.secretKey = 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
amazonProperties.bucketName = bucket name
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.http.multipart.max-file-size=5MB
spring.http.multipart.max-request-size=5MB

management.endpoints.web.exposure.include=*
